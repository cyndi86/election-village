// Generated by LiveScript 1.2.0
var age;
age = function($scope, $http, $timeout){
  var ref$, w, h, m, ctx1, color;
  ref$ = [$(window).width(), $(window).height(), 20], w = ref$[0], h = ref$[1], m = ref$[2];
  $('#chart1').attr({
    width: w - 40,
    height: h - 120
  });
  ctx1 = $('#chart1')[0].getContext('2d');
  $scope.color = color = d3.scale.category20();
  $scope.chart1 = new Chart(ctx1);
  $scope.raw = {};
  $scope.type = 1;
  $scope.$watch('type', function(v){
    if (v) {
      return $scope.load();
    }
  });
  $scope.stackmap = d3.scale.linear().domain([0, 1]).range([0, 1000]);
  $scope.stack = function(v){
    var d, i$, ref$, len$, set, sum, acc, ret, j$, i, x$, y$;
    console.log(v);
    d = import$({}, v);
    for (i$ = 0, len$ = (ref$ = d.datasets).length; i$ < len$; ++i$) {
      set = ref$[i$];
      sum = set.data.reduce(fn$, 0);
      acc = 0;
      ret = [];
      for (j$ = 0; j$ < 6; ++j$) {
        i = j$;
        ret = ret.concat([{
          acc: $scope.stackmap(acc / sum),
          value: $scope.stackmap(set.data[i] / sum)
        }]);
        acc += set.data[i];
      }
      set.data = ret;
    }
    d.datasets.sort(function(a, b){
      return a.data[3].value - b.data[3].value;
    });
    console.log(d);
    x$ = d3.select('body').selectAll('svg.stack').data(d.datasets);
    x$.exit().remove();
    x$.enter().append('svg').attr({
      "viewBox": "0 0 1000 100",
      "class": "stack"
    });
    d3.selectAll('svg.stack').each(function(d, i){
      var x$;
      x$ = d3.select(this).selectAll('rect').data(d.data);
      x$.exit().remove();
      x$.enter().append('rect').attr({
        x: function(it){
          return it.acc;
        },
        y: 0,
        width: function(it){
          return it.value;
        },
        height: 100,
        fill: function(d, i){
          return color(i);
        }
      });
      return x$;
    });
    y$ = d3.select('body').selectAll('svg').append('text');
    y$.attr({
      y: 20,
      x: 10
    });
    y$.text(function(it){
      return it.label;
    });
    return y$;
    function fn$(a, b){
      return a + b;
    }
  };
  return $scope.load = function(){
    $http({
      url: $scope.type === 1 ? 'age-chart-group.json' : 'age-chart.json',
      method: 'GET'
    }).success(function(chd){
      return $timeout(function(){
        if ($scope.type === 1) {
          return $scope.stack(chd);
        }
      }, 1000);
    });
    return $http({
      url: $scope.type === 1 ? 'age-chart-group.json' : 'age-chart.json',
      method: 'GET'
    }).success(function(chd){
      chd.datasets = chd.datasets.filter(function(it){
        return it.label.length > 3 && Math.random() > ($scope.type === 1 ? 0.9 : 0.97);
      });
      chd.datasets.map(function(it){
        var c;
        c = color(it.label);
        return import$(it, {
          fillColor: c,
          strokeColor: c,
          pointColor: c,
          pointStrokeColor: c
        });
      });
      return $scope.chart1.Line(chd, {
        bezierCurveTension: 0.2,
        animation: false,
        datasetFill: false,
        multiTooltipTemplate: "<%= datasetLabel %> - <%= value %>"
      });
    }).error(function(e){
      return console.error(e);
    });
  };
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}